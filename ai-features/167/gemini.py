import os
import json
from dotenv import load_dotenv
from google import genai
from google.cloud import texttospeech

load_dotenv()


def translate_vocabulary_with_context(
    selected_word: str, context_sentence: str, target_level: str
) -> dict:
    """
    S·ª≠ d·ª•ng Gemini ƒë·ªÉ d·ªãch t·ª´ v·ª±ng theo ng·ªØ c·∫£nh v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin ph√°t √¢m v√† v√≠ d·ª•.
    """
    try:
        client = genai.Client()

        prompt_text = f"""
            B·∫°n l√† m·ªôt chuy√™n gia ng√¥n ng·ªØ h·ªçc v√† gi·∫£ng d·∫°y ti·∫øng Anh, chuy√™n v·ªÅ vi·ªác gi·∫£i th√≠ch t·ª´ v·ª±ng theo ng·ªØ c·∫£nh cho ng∆∞·ªùi h·ªçc Vi·ªát Nam.

            **B·ªëi c·∫£nh:**
            - T·ª´ v·ª±ng ƒë∆∞·ª£c ch·ªçn: "{selected_word}"
            - C√¢u ch·ª©a t·ª´ v·ª±ng (ng·ªØ c·∫£nh): "{context_sentence}"
            - Tr√¨nh ƒë·ªô ng∆∞·ªùi h·ªçc: "{target_level}"

            **Y√™u c·∫ßu:**
            1. Ph√¢n t√≠ch t·ª´ "{selected_word}" trong ng·ªØ c·∫£nh c√¢u "{context_sentence}".
            2. Cung c·∫•p nghƒ©a ch√≠nh x√°c c·ªßa t·ª´ trong ng·ªØ c·∫£nh n√†y (kh√¥ng ph·∫£i nghƒ©a chung).
            3. Gi·∫£i th√≠ch chi ti·∫øt c√°ch s·ª≠ d·ª•ng t·ª´ n√†y trong t√¨nh hu·ªëng c·ª• th·ªÉ.
            4. Cung c·∫•p phi√™n √¢m qu·ªëc t·∫ø (IPA) ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c.
            5. T·∫°o 3 v√≠ d·ª• m·∫´u kh√°c s·ª≠ d·ª•ng t·ª´ n√†y v·ªõi nghƒ©a t∆∞∆°ng t·ª±.
            6. Cung c·∫•p to√†n b·ªô k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t. **Kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n gi·∫£i th√≠ch n√†o b√™n ngo√†i ƒë·ªëi t∆∞·ª£ng JSON n√†y.**

            **C·∫•u tr√∫c JSON ƒë·∫ßu ra b·∫Øt bu·ªôc:**
            {{
              "word": "{selected_word}",
              "context": "{context_sentence}",
              "level": "{target_level}",
              "contextual_meaning": {{
                "vietnamese": "<Nghƒ©a ti·∫øng Vi·ªát ch√≠nh x√°c trong ng·ªØ c·∫£nh n√†y>",
                "english_definition": "<ƒê·ªãnh nghƒ©a b·∫±ng ti·∫øng Anh ƒë∆°n gi·∫£n ph√π h·ª£p tr√¨nh ƒë·ªô>",
                "word_class": "<T·ª´ lo·∫°i: noun/verb/adjective/adverb/...>"
              }},
              "pronunciation": {{
                "ipa": "<Phi√™n √¢m IPA ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c>",
                "phonetic_spelling": "<C√°ch ƒë·ªçc ƒë∆°n gi·∫£n b·∫±ng ti·∫øng Vi·ªát>",
                "stress_pattern": "<M√¥ t·∫£ tr·ªçng √¢m, v√≠ d·ª•: 'Tr·ªçng √¢m r∆°i v√†o √¢m ti·∫øt th·ª© 2'>"
              }},
              "detailed_explanation": {{
                "usage_in_context": "<Gi·∫£i th√≠ch c√°ch t·ª´ n√†y ho·∫°t ƒë·ªông trong c√¢u g·ªëc>",
                "grammar_notes": "<Ghi ch√∫ ng·ªØ ph√°p n·∫øu c√≥ (c·∫•u tr√∫c, collocations, v.v.)>",
                "common_mistakes": "<L·ªói th∆∞·ªùng g·∫∑p khi s·ª≠ d·ª•ng t·ª´ n√†y>"
              }},
              "example_sentences": [
                {{
                  "sentence": "<V√≠ d·ª• ti·∫øng Anh th·ª© nh·∫•t>",
                  "translation": "<B·∫£n d·ªãch ti·∫øng Vi·ªát>",
                  "explanation": "<Gi·∫£i th√≠ch ng·∫Øn g·ªçn v·ªÅ c√°ch s·ª≠ d·ª•ng trong v√≠ d·ª• n√†y>"
                }},
                {{
                  "sentence": "<V√≠ d·ª• ti·∫øng Anh th·ª© hai>", 
                  "translation": "<B·∫£n d·ªãch ti·∫øng Vi·ªát>",
                  "explanation": "<Gi·∫£i th√≠ch ng·∫Øn g·ªçn v·ªÅ c√°ch s·ª≠ d·ª•ng trong v√≠ d·ª• n√†y>"
                }},
                {{
                  "sentence": "<V√≠ d·ª• ti·∫øng Anh th·ª© ba>",
                  "translation": "<B·∫£n d·ªãch ti·∫øng Vi·ªát>", 
                  "explanation": "<Gi·∫£i th√≠ch ng·∫Øn g·ªçn v·ªÅ c√°ch s·ª≠ d·ª•ng trong v√≠ d·ª• n√†y>"
                }}
              ],
              "related_vocabulary": {{
                "synonyms": ["<t·ª´ ƒë·ªìng nghƒ©a 1>", "<t·ª´ ƒë·ªìng nghƒ©a 2>"],
                "antonyms": ["<t·ª´ tr√°i nghƒ©a 1>", "<t·ª´ tr√°i nghƒ©a 2>"],
                "collocations": ["<c·ª•m t·ª´ th∆∞·ªùng ƒëi k√®m 1>", "<c·ª•m t·ª´ th∆∞·ªùng ƒëi k√®m 2>"]
              }},
              "audio_text": "<T·ª´ v·ª±ng ƒë·ªÉ t·∫°o file ph√°t √¢m>"
            }}
        """

        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=[{"role": "user", "parts": [{"text": prompt_text}]}],
        )

        if not response.text:
            return {"error": "Gemini kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£."}

        cleaned_response = (
            response.text.strip().replace("```json", "").replace("```", "").strip()
        )
        return json.loads(cleaned_response)

    except Exception as e:
        print(f"L·ªói Gemini: {e}")
        return {"error": "Kh√¥ng th·ªÉ d·ªãch t·ª´ v·ª±ng b·∫±ng Gemini."}


def create_pronunciation_audio(text: str, output_file: str) -> str | None:
    """
    S·ª≠ d·ª•ng Google Cloud Text-to-Speech ƒë·ªÉ t·∫°o file ph√°t √¢m.
    """
    try:
        client = texttospeech.TextToSpeechClient()
        synthesis_input = texttospeech.SynthesisInput(text=text)

        voice = texttospeech.VoiceSelectionParams(
            language_code="en-US",
            name="en-US-Wavenet-D",  # Gi·ªçng n·ªØ t·ª± nhi√™n
            ssml_gender=texttospeech.SsmlVoiceGender.FEMALE,
        )

        audio_config = texttospeech.AudioConfig(
            audio_encoding=texttospeech.AudioEncoding.LINEAR16,
            speaking_rate=0.9,  # Ch·∫≠m h∆°n m·ªôt ch√∫t ƒë·ªÉ d·ªÖ nghe
        )

        response = client.synthesize_speech(
            input=synthesis_input, voice=voice, audio_config=audio_config
        )

        with open(output_file, "wb") as out:
            out.write(response.audio_content)
        print(f"‚úÖ File ph√°t √¢m ƒë√£ ƒë∆∞·ª£c t·∫°o: {output_file}")
        return output_file

    except Exception as e:
        print(f"L·ªói Google TTS: {e}")
        return None


def process_vocabulary_translation(
    selected_word: str,
    context_sentence: str,
    target_level: str,
    create_audio: bool = True,
) -> dict:
    """
    H√†m ch√≠nh x·ª≠ l√Ω d·ªãch t·ª´ v·ª±ng v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng.
    """
    print(f"ƒêang ph√¢n t√≠ch t·ª´ '{selected_word}' trong ng·ªØ c·∫£nh...")

    # B∆∞·ªõc 1: D·ªãch v√† ph√¢n t√≠ch t·ª´ v·ª±ng
    translation_result = translate_vocabulary_with_context(
        selected_word=selected_word,
        context_sentence=context_sentence,
        target_level=target_level,
    )

    if "error" in translation_result:
        return translation_result

    # B∆∞·ªõc 2: T·∫°o file ph√°t √¢m n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if create_audio and "audio_text" in translation_result:
        audio_filename = f"pronunciation_{selected_word.lower().replace(' ', '_')}.wav"
        audio_file = create_pronunciation_audio(
            translation_result["audio_text"], audio_filename
        )
        if audio_file:
            translation_result["pronunciation_audio"] = audio_file

    return translation_result


if __name__ == "__main__":
    # V√≠ d·ª• demo
    SELECTED_WORD = "score"
    CONTEXT_SENTENCE = "The student received a high score on the VSTEP exam."
    TARGET_LEVEL = "VSTEP B1"

    print(f"T√çNH NƒÇNG 167: D·ªäCH T·ª™ V·ª∞NG THEO NG·ªÆ C·∫¢NH")
    print(f"T·ª´ ƒë∆∞·ª£c ch·ªçn: '{SELECTED_WORD}'")
    print(f"Ng·ªØ c·∫£nh: '{CONTEXT_SENTENCE}'")
    print(f"Tr√¨nh ƒë·ªô: {TARGET_LEVEL}")
    print("=" * 60)

    result = process_vocabulary_translation(
        selected_word=SELECTED_WORD,
        context_sentence=CONTEXT_SENTENCE,
        target_level=TARGET_LEVEL,
        create_audio=True,
    )

    if "error" in result:
        print(f"L·ªói: {result['error']}")
    else:
        print("‚úÖ Ph√¢n t√≠ch t·ª´ v·ª±ng ho√†n t·∫•t!")
        print()
        print("--- K·∫æT QU·∫¢ CHI TI·∫æT ---")
        print(json.dumps(result, indent=2, ensure_ascii=False))

        # L∆∞u k·∫øt qu·∫£ v√†o file ƒë·ªÉ tham kh·∫£o
        with open(
            f"vocabulary_analysis_{SELECTED_WORD}.json", "w", encoding="utf-8"
        ) as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        print(
            f"\nüìÑ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o 'vocabulary_analysis_{SELECTED_WORD}.json'"
        )


""" 
*Input:
  - selected_word: str - T·ª´ v·ª±ng ƒë∆∞·ª£c ng∆∞·ªùi d√πng b√¥i ƒëen/ch·ªçn (v√≠ d·ª•: "score")
  - context_sentence: str - C√¢u ch·ª©a t·ª´ v·ª±ng ƒë√≥ ƒë·ªÉ hi·ªÉu ng·ªØ c·∫£nh (v√≠ d·ª•: "The student received a high score on the exam.")
  - target_level: str - Tr√¨nh ƒë·ªô c·ªßa ng∆∞·ªùi h·ªçc (v√≠ d·ª•: "VSTEP B1", "TOEIC 500", "FLYERS")
  - create_audio: bool - C√≥ t·∫°o file ph√°t √¢m kh√¥ng (m·∫∑c ƒë·ªãnh True)

*Output:
  - dict - K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ v·ª±ng v·ªõi c·∫•u tr√∫c JSON:
    {
      "word": "<t·ª´ v·ª±ng ƒë∆∞·ª£c ch·ªçn>",
      "context": "<c√¢u ng·ªØ c·∫£nh>", 
      "level": "<tr√¨nh ƒë·ªô ng∆∞·ªùi h·ªçc>",
      "contextual_meaning": {
        "vietnamese": "<nghƒ©a ti·∫øng Vi·ªát ch√≠nh x√°c trong ng·ªØ c·∫£nh>",
        "english_definition": "<ƒë·ªãnh nghƒ©a ti·∫øng Anh ƒë∆°n gi·∫£n>",
        "word_class": "<t·ª´ lo·∫°i>"
      },
      "pronunciation": {
        "ipa": "<phi√™n √¢m IPA>",
        "phonetic_spelling": "<c√°ch ƒë·ªçc b·∫±ng ti·∫øng Vi·ªát>", 
        "stress_pattern": "<m√¥ t·∫£ tr·ªçng √¢m>"
      },
      "detailed_explanation": {
        "usage_in_context": "<gi·∫£i th√≠ch c√°ch s·ª≠ d·ª•ng trong c√¢u g·ªëc>",
        "grammar_notes": "<ghi ch√∫ ng·ªØ ph√°p>",
        "common_mistakes": "<l·ªói th∆∞·ªùng g·∫∑p>"
      },
      "example_sentences": [
        {
          "sentence": "<v√≠ d·ª• ti·∫øng Anh>",
          "translation": "<b·∫£n d·ªãch ti·∫øng Vi·ªát>",
          "explanation": "<gi·∫£i th√≠ch c√°ch s·ª≠ d·ª•ng>"
        }
      ],
      "related_vocabulary": {
        "synonyms": ["<t·ª´ ƒë·ªìng nghƒ©a>"],
        "antonyms": ["<t·ª´ tr√°i nghƒ©a>"], 
        "collocations": ["<c·ª•m t·ª´ th∆∞·ªùng ƒëi k√®m>"]
      },
      "audio_text": "<text ƒë·ªÉ t·∫°o audio>",
      "pronunciation_audio": "<ƒë∆∞·ªùng d·∫´n file audio n·∫øu ƒë∆∞·ª£c t·∫°o>"
    }

*T√≠nh nƒÉng ch√≠nh:
  - D·ªãch t·ª´ v·ª±ng theo ng·ªØ c·∫£nh c·ª• th·ªÉ (kh√¥ng ph·∫£i nghƒ©a chung)
  - Cung c·∫•p phi√™n √¢m IPA ch√≠nh x√°c v√† c√°ch ƒë·ªçc ti·∫øng Vi·ªát
  - Gi·∫£i th√≠ch chi ti·∫øt c√°ch s·ª≠ d·ª•ng v·ªõi v√≠ d·ª• m·∫´u
  - T·∫°o file ph√°t √¢m b·∫±ng Google Cloud TTS
  - G·ª£i √Ω t·ª´ v·ª±ng li√™n quan (ƒë·ªìng nghƒ©a, tr√°i nghƒ©a, collocations)
  - Ph√π h·ª£p v·ªõi tr√¨nh ƒë·ªô ng∆∞·ªùi h·ªçc

*C√°ch s·ª≠ d·ª•ng:
  1. Ng∆∞·ªùi d√πng b√¥i ƒëen t·ª´ v·ª±ng trong m·ªôt c√¢u
  2. H·ªá th·ªëng g·ªçi h√†m process_vocabulary_translation()
  3. Nh·∫≠n ƒë∆∞·ª£c ph√¢n t√≠ch chi ti·∫øt v√† file ph√°t √¢m
  4. C√≥ th·ªÉ l∆∞u v√†o s·ªï tay t·ª´ v·ª±ng c√° nh√¢n
"""
